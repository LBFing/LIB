
#include "logger.h"

#include "share_memory.h"
#include "redis_command.h"
#include "string_tool.h"
#include "blocking_queue.h"
#include "buffer_ex.h"



struct SharedST
{
	SharedST()
	{
		memset(this, 0, sizeof(SharedST));
	}
	uint32 id;
	uint32 num;
	char name[20];
};


void TestShareMemeory()
{
	SharedMemoryManager::newInstance();
	SharedMemoryManager::getInstance().allSharedMemory("shared.data");
	for (uint32 i = 1 ; i <= 20; i++)
	{
		SharedST* pTemp = new SharedST();
		if(pTemp)
		{
			pTemp->id = i;
			pTemp->num = 100 * i;
			sprintf(pTemp->name, "name_%d", i);
			SharedMemoryManager::getInstance().allocSharedMemory(i, pTemp, sizeof(SharedST));
			delete pTemp;
		}
	}
	struct SharedMemCB : public Callback<SharedST>
	{
		SharedMemCB() { count = 0 ;}
		bool exec(SharedST* pShared)
		{
			if (pShared == NULL)
			{
				return false;
			}

			DEBUG("Id:%d	Num:%d	Name:%s", pShared->id, pShared->num, pShared->name);
			count++;
			return true;
		}
		uint32 count;
	};

	SharedMemCB cb;
	SharedMemoryManager::getInstance().execEveryEntry(cb);
	INFO("SharedMemory Count:%d", cb.count);

	bool isExist = false;
	SharedST* pShared = (SharedST*)SharedMemoryManager::getInstance().setSharedMemory(15, isExist);
	INFO("Id:%d	Num:%d	Name:%s", pShared->id, pShared->num, pShared->name);

	SharedMemoryManager::delInstance();
}

void TestRedisCommand()
{
	Redis* r = new Redis();
	if(!r->connect("127.0.0.1", 6379))
	{
		ERROR("redis connect error!");
		return;
	}
	INFO("redis connect success!");
	r->set("name", "Mayuyu");
	DEBUG("Redis name:%s", r->get("name").c_str());
	delete r;
}

void TestBlockQueue()
{
	BlockingQueue<std::string> queue;
	for(int32 i = 0; i < 1000 ; i++)
	{
		string strTmp = StringTool::Format("%d",i);
		queue.put(strTmp);
	}

	INFO("queue size:%lu",queue.size());
	for (int32 i = 0 ; i < 10; i++)
	{
		string strTmp = queue.take();
		DEBUG("queue: %s",strTmp.c_str());
	}
	INFO("queue size:%lu",queue.size());
}



__thread uint32 seedp;

int main(int argc, char const* argv[])
{
	seedp = (uint32)time(NULL);
	InitLogger("/root/study/LIB/log/test.log", "DEBUG");
	//TestXMLParse();
	//TestJson();
	//TestMessage();
	//TestRegex();
	//TestVarType();
	//TestMysqlPool();
	//TestSigal();
	//usleep(SECOND);
	//for(int32 i = 0 ; i < 100; i++ )
	//{
	//	int32 abc = randBetween(1, 100);
	//	DEBUG("rand :%d", abc);
	//}
	//DEBUG("over!");
	//TestShareMemeory();
	//usleep(SECOND * 100);
	//TestRedisCommand();

	TestBlockQueue();
	return 0;
}
